"""Minimal builtins stub for core Python types.

This file provides type information for built-in Python types and functions."""

from typing import TypeVar, Generic, Iterator, Iterable, Generator, AsyncGenerator, Coroutine

_T = TypeVar("_T")
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")
_T_co = TypeVar("_T_co", covariant=True)
_T2 = TypeVar("_T2")
_YieldT = TypeVar("_YieldT")
_SendT = TypeVar("_SendT")
_ReturnT = TypeVar("_ReturnT")

class int:
    def __add__(self, other: int) -> int: ...
    def __sub__(self, other: int) -> int: ...
    def __mul__(self, other: int) -> int: ...
    def __truediv__(self, other: int) -> float: ...
    def __floordiv__(self, other: int) -> int: ...
    def __mod__(self, other: int) -> int: ...
    def __pow__(self, other: int) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: int) -> bool: ...
    def __le__(self, other: int) -> bool: ...
    def __gt__(self, other: int) -> bool: ...
    def __ge__(self, other: int) -> bool: ...

class float:
    def __add__(self, other: float) -> float: ...
    def __sub__(self, other: float) -> float: ...
    def __mul__(self, other: float) -> float: ...
    def __truediv__(self, other: float) -> float: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: float) -> bool: ...
    def __le__(self, other: float) -> bool: ...
    def __gt__(self, other: float) -> bool: ...
    def __ge__(self, other: float) -> bool: ...

class str:
    def upper(self) -> str: ...
    def lower(self) -> str: ...
    def strip(self) -> str: ...
    def lstrip(self) -> str: ...
    def rstrip(self) -> str: ...
    def split(self, sep: str | None = None, maxsplit: int = -1) -> list[str]: ...
    def join(self, iterable: Iterable[str]) -> str: ...
    def replace(self, old: str, new: str, count: int = -1) -> str: ...
    def startswith(self, prefix: str) -> bool: ...
    def endswith(self, suffix: str) -> bool: ...
    def format(self, *args, **kwargs) -> str: ...
    def __add__(self, other: str) -> str: ...
    def __mul__(self, other: int) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __getitem__(self, index: int) -> str: ...
    def __len__(self) -> int: ...

class bool:
    def __and__(self, other: bool) -> bool: ...
    def __or__(self, other: bool) -> bool: ...
    def __xor__(self, other: bool) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class list(Generic[_T]):
    def append(self, item: _T) -> None: ...
    def extend(self, items: Iterable[_T]) -> None: ...
    def insert(self, index: int, item: _T) -> None: ...
    def remove(self, item: _T) -> None: ...
    def pop(self, index: int = -1) -> _T: ...
    def clear(self) -> None: ...
    def index(self, item: _T) -> int: ...
    def count(self, item: _T) -> int: ...
    def sort(self) -> None: ...
    def reverse(self) -> None: ...
    def __getitem__(self, index: int) -> _T: ...
    def __setitem__(self, index: int, value: _T) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __add__(self, other: list[_T]) -> list[_T]: ...
    def __mul__(self, other: int) -> list[_T]: ...

class dict(Generic[_KT, _VT]):
    def get(self, key: _KT, default: _VT | None = None) -> _VT | None: ...
    def keys(self) -> Iterator[_KT]: ...
    def values(self) -> Iterator[_VT]: ...
    def items(self) -> Iterator[tuple[_KT, _VT]]: ...
    def pop(self, key: _KT, default: _VT | None = None) -> _VT | None: ...
    def clear(self) -> None: ...
    def update(self, other: dict[_KT, _VT]) -> None: ...
    def __getitem__(self, key: _KT) -> _VT: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    def __delitem__(self, key: _KT) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_KT]: ...

class tuple(Generic[_T_co]):
    def __getitem__(self, index: int) -> _T_co: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T_co]: ...
    def count(self, item: _T_co) -> int: ...
    def index(self, item: _T_co) -> int: ...

class set(Generic[_T]):
    def add(self, item: _T) -> None: ...
    def remove(self, item: _T) -> None: ...
    def discard(self, item: _T) -> None: ...
    def pop(self) -> _T: ...
    def clear(self) -> None: ...
    def union(self, other: set[_T]) -> set[_T]: ...
    def intersection(self, other: set[_T]) -> set[_T]: ...
    def difference(self, other: set[_T]) -> set[_T]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...

class frozenset(Generic[_T_co]):
    def union(self, other: frozenset[_T_co]) -> frozenset[_T_co]: ...
    def intersection(self, other: frozenset[_T_co]) -> frozenset[_T_co]: ...
    def difference(self, other: frozenset[_T_co]) -> frozenset[_T_co]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T_co]: ...

class object:
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class type:
    def __call__(self, *args, **kwargs): ...

class NoneType: ...

def len(obj) -> int: ...
def print(*args, **kwargs) -> None: ...
def range(start: int, stop: int | None = None, step: int = 1) -> Iterator[int]: ...
def enumerate(iterable: Iterable[_T], start: int = 0) -> Iterator[tuple[int, _T]]: ...
def zip(iter1: Iterable[_T], iter2: Iterable[_T]) -> Iterator[tuple[_T, _T]]: ...
def map(func, iterable: Iterable[_T]) -> Iterator: ...
def filter(func, iterable: Iterable[_T]) -> Iterator[_T]: ...
def sum(iterable: Iterable[int | float]) -> int | float: ...
def min(iterable: Iterable[_T]) -> _T: ...
def max(iterable: Iterable[_T]) -> _T: ...
def abs(x: int | float) -> int | float: ...
def round(x: float, ndigits: int = 0) -> float: ...
def isinstance(obj, classinfo) -> bool: ...
def issubclass(cls, classinfo) -> bool: ...
def hasattr(obj, name: str) -> bool: ...
def getattr(obj, name: str, default=None): ...
def setattr(obj, name: str, value) -> None: ...
def delattr(obj, name: str) -> None: ...
def id(obj) -> int: ...
def hash(obj) -> int: ...
def open(file: str, mode: str = "r", encoding: str | None = None): ...

class _IO:
    def read(self, size: int = -1) -> str: ...
    def write(self, s: str) -> int: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
